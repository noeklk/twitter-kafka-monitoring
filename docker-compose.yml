version: "3.7"
services:
  hadoop-master:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-master
    restart: always
    ports:
      - "9870:9870"
      - "9000:9000"
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./docker/hadoop/hadoop.env

  hadoop-worker:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-worker
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "hadoop-master:9870"
    env_file:
      - ./docker/hadoop/hadoop.env

  spark-master:
    image: bde2020/spark-master:3.1.1-hadoop3.2
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark

  spark-worker-1:
    image: bde2020/spark-worker:3.1.1-hadoop3.2
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"

  pyspark-notebook:
    build: ./docker/pyspark_notebook/.
    container_name: pyspark-notebook
    ports:
      - "8888:8888"
    volumes:
      - ./work:/home/jovyan/work
      - ./work/data:/home/jovyan/work/data
      - ./work/model:/tmp/model_prediction
    environment:
      - PYSPARK_PYTHON=/usr/bin/python3
      - PYSPARK_DRIVER_PYTHON=ipython3
    env_file:
      - ./.env

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    # An important note about accessing Kafka from clients on other machines:
    # -----------------------------------------------------------------------
    #
    # The config used here exposes port 29092 for _external_ connections to the broker
    # i.e. those from _outside_ the docker network. This could be from the host machine
    # running docker, or maybe further afield if you've got a more complicated setup.
    # If the latter is true, you will need to change the value 'localhost' in
    # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those
    # remote clients
    #
    # For connections _internal_ to the docker network, such as from other services
    # and components, use kafka:9092.
    #
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    #

    build: ./docker/kafka/.
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  mongo:
    image: "mongo:4.0.7"
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongodb:/data/db
      - ./docker/mongodb/mongod.conf:/etc/mongod.conf
    # environment:
    #   - MONGO_INITDB_DATABASE=$${MONGO_INIT_DATABASE}
    #   - MONGO_INITDB_ROOT_USERNAME=$${MONGO_ROOT_USERNAME}
    #   - MONGO_INITDB_ROOT_PASSWORD=$${MONGO_ROOT_PASSWORD}
    env_file:
      - ./docker/mongodb/mongo.env

  mongo-express:
    image: mongo-express:1.0.0-alpha
    container_name: mongo-express
    # environment:
    #   #- ME_CONFIG_MONGODB_AUTH_DATABASE=$${INIT_DATABASE}
    #   - ME_CONFIG_MONGODB_SERVER=mongo
    #   - ME_CONFIG_MONGODB_PORT=27017
    #   - ME_CONFIG_MONGODB_ENABLE_ADMIN=false
    #   - ME_CONFIG_BASICAUTH_USERNAME=$${MONGO_ROOT_USERNAME}
    #   - ME_CONFIG_BASICAUTH_PASSWORD=$${MONGO_ROOT_PASSWORD}
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    env_file:
      - ./docker/mongodb/mongo.env

  streamlit:
    build: ./docker/streamlit
    container_name: streamlit
    ports:
      - "8501:8501"
    volumes:
      - "./app:/usr/src/app"

volumes:
  mongodb:
  hadoop_datanode:
  hadoop_namenode:
